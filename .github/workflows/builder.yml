name: Universal Kernel Builder

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: '🔗 URL source kernel'
        required: true
        default: 'https://github.com/lynxdevproject/kernel-begonia'
      branch:
        description: '🌿 Branch to build'
        required: true
        default: 'main'
      codename:
        description: '📱 Device codename'
        required: true
        default: 'begonia'
      defconfig:
        description: '🧪 Kernel defconfig'
        required: true
        default: 'begonia_user_defconfig'
      anykernel:
        description: '📦 Use AnyKernel3 packaging?'
        required: true
        type: boolean
        default: false
      anykernel_repo:
        description: '🌐 URL AnyKernel3 repo'
        required: false
        default: 'https://github.com/osm0sis/AnyKernel3.git'
      anykernel_branch:
        description: '🌿 Branch of AnyKernel3'
        required: false
        default: 'master'
      zip_name:
        description: '📝 Output ZIP base name (e.g., astra-kernel-begonia)'
        required: false
        default: 'ReogKernel'
      developer:
        description: '👤 Your name or ID (e.g., lynx@workspace)'
        required: false
        default: 'anon'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Jakarta
      OUT_DIR: out

    steps:
      - name: ⏱️ Sync Kernel Source
        run: |
          git clone --depth=1 -b "${{ github.event.inputs.branch }}" "${{ github.event.inputs.source_repo }}" kernel
          cd kernel

      - name: 🔧 Setup AOSP Clang Toolchain
        run: |
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 aosp-clang
          echo "CLANG_FOLDER=$(ls aosp-clang | grep 'clang-')" >> $GITHUB_ENV

      - name: 🧰 Install Dependencies
        run: |
          sudo apt update && sudo apt install -y \
            bc bison flex build-essential libssl-dev \
            libncurses-dev ccache clang libelf-dev

      - name: ⚙️ Compile Kernel
        run: |
          cd kernel
          export ARCH=arm64
          export SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-android-
          export PATH="${GITHUB_WORKSPACE}/aosp-clang/${{ env.CLANG_FOLDER }}/bin:${PATH}"
          mkdir -p $OUT_DIR
          make O=$OUT_DIR ${{ github.event.inputs.defconfig }}
          make O=$OUT_DIR -j$(nproc) 2>&1 | tee ../build.log

      - name: 📦 Package with AnyKernel3
        if: ${{ github.event.inputs.anykernel }}
        run: |
          git clone --depth=1 -b "${{ github.event.inputs.anykernel_branch }}" "${{ github.event.inputs.anykernel_repo }}" anykernel
          cp out/Image.gz-dtb anykernel/
          cd anykernel
          DATE=$(date +'%Y-%m-%d_%H-%M')
          ZIP_NAME="${{ github.event.inputs.zip_name }}-${{ github.event.inputs.codename }}-${{ github.event.inputs.developer }}-${DATE}.zip"
          zip -r "${ZIP_NAME}" *

      - name: ☁️ Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-${{ github.event.inputs.codename }}
          path: |
            build.log
            out/Image.gz-dtb
            anykernel/*.zip
